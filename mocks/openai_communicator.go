// Code generated by MockGen. DO NOT EDIT.
// Source: openai_communicator.go

// Package mock_openai_api is a generated GoMock package.
package mock_openai_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenAiApiCommunicator is a mock of OpenAiApiCommunicator interface.
type MockOpenAiApiCommunicator struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAiApiCommunicatorMockRecorder
}

// MockOpenAiApiCommunicatorMockRecorder is the mock recorder for MockOpenAiApiCommunicator.
type MockOpenAiApiCommunicatorMockRecorder struct {
	mock *MockOpenAiApiCommunicator
}

// NewMockOpenAiApiCommunicator creates a new mock instance.
func NewMockOpenAiApiCommunicator(ctrl *gomock.Controller) *MockOpenAiApiCommunicator {
	mock := &MockOpenAiApiCommunicator{ctrl: ctrl}
	mock.recorder = &MockOpenAiApiCommunicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAiApiCommunicator) EXPECT() *MockOpenAiApiCommunicatorMockRecorder {
	return m.recorder
}

// GenerateImage mocks base method.
func (m *MockOpenAiApiCommunicator) GenerateImage(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateImage", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateImage indicates an expected call of GenerateImage.
func (mr *MockOpenAiApiCommunicatorMockRecorder) GenerateImage(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateImage", reflect.TypeOf((*MockOpenAiApiCommunicator)(nil).GenerateImage), input)
}

// GptCompletion mocks base method.
func (m *MockOpenAiApiCommunicator) GptCompletion(message string, maxToken int, gptModel string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GptCompletion", message, maxToken, gptModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GptCompletion indicates an expected call of GptCompletion.
func (mr *MockOpenAiApiCommunicatorMockRecorder) GptCompletion(message, maxToken, gptModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GptCompletion", reflect.TypeOf((*MockOpenAiApiCommunicator)(nil).GptCompletion), message, maxToken, gptModel)
}

// TextToSpeech mocks base method.
func (m *MockOpenAiApiCommunicator) TextToSpeech(input, voice string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextToSpeech", input, voice)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextToSpeech indicates an expected call of TextToSpeech.
func (mr *MockOpenAiApiCommunicatorMockRecorder) TextToSpeech(input, voice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextToSpeech", reflect.TypeOf((*MockOpenAiApiCommunicator)(nil).TextToSpeech), input, voice)
}
